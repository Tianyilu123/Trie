class Solution {
    int maxLen = 0;
    String longestWord;
	
    public String longestWord(String[] words) {
        TrieNode root = buildTrie(words);
        for (int i = 0; i < 26; ++i) {
            if (root.children[i] != null) {
                dfs(root.children[i], 1);
            }
        }
        return longestWord;
    }
    
    TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        
        for (String word : words) {
            TrieNode p = root;
            
            for (char c : word.toCharArray()) {
                if (p.children[c - 'a'] == null) {
                    p.children[c - 'a'] = new TrieNode();
                }
                p = p.children[c - 'a'];
            }
            p.isWord = true;
            p.word = word;
        }
        return root;
    }
    
    void dfs(TrieNode root, int depth) {
        if (!root.isWord)   return;
        
        if (depth > maxLen) {
            maxLen = depth;
            longestWord = root.word;
        }
        
        for (int i = 0; i < 26; ++i) {
            if (root.children[i] != null) {
                dfs(root.children[i], depth + 1);
            }
        }
    }
    
    class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isWord;
        String word;
    }
}
